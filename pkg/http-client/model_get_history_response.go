/*
Over Engineered Calculator

This is a sample API for an over engineered calculator for a coding test

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetHistoryResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetHistoryResponse{}

// GetHistoryResponse struct for GetHistoryResponse
type GetHistoryResponse struct {
	CalculationHistory []GetHistoryHistoryEntry `json:"calculationHistory,omitempty"`
}

// NewGetHistoryResponse instantiates a new GetHistoryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetHistoryResponse() *GetHistoryResponse {
	this := GetHistoryResponse{}
	return &this
}

// NewGetHistoryResponseWithDefaults instantiates a new GetHistoryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetHistoryResponseWithDefaults() *GetHistoryResponse {
	this := GetHistoryResponse{}
	return &this
}

// GetCalculationHistory returns the CalculationHistory field value if set, zero value otherwise.
func (o *GetHistoryResponse) GetCalculationHistory() []GetHistoryHistoryEntry {
	if o == nil || IsNil(o.CalculationHistory) {
		var ret []GetHistoryHistoryEntry
		return ret
	}
	return o.CalculationHistory
}

// GetCalculationHistoryOk returns a tuple with the CalculationHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetHistoryResponse) GetCalculationHistoryOk() ([]GetHistoryHistoryEntry, bool) {
	if o == nil || IsNil(o.CalculationHistory) {
		return nil, false
	}
	return o.CalculationHistory, true
}

// HasCalculationHistory returns a boolean if a field has been set.
func (o *GetHistoryResponse) HasCalculationHistory() bool {
	if o != nil && !IsNil(o.CalculationHistory) {
		return true
	}

	return false
}

// SetCalculationHistory gets a reference to the given []GetHistoryHistoryEntry and assigns it to the CalculationHistory field.
func (o *GetHistoryResponse) SetCalculationHistory(v []GetHistoryHistoryEntry) {
	o.CalculationHistory = v
}

func (o GetHistoryResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetHistoryResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CalculationHistory) {
		toSerialize["calculationHistory"] = o.CalculationHistory
	}
	return toSerialize, nil
}

type NullableGetHistoryResponse struct {
	value *GetHistoryResponse
	isSet bool
}

func (v NullableGetHistoryResponse) Get() *GetHistoryResponse {
	return v.value
}

func (v *NullableGetHistoryResponse) Set(val *GetHistoryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetHistoryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetHistoryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetHistoryResponse(val *GetHistoryResponse) *NullableGetHistoryResponse {
	return &NullableGetHistoryResponse{value: val, isSet: true}
}

func (v NullableGetHistoryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetHistoryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


