/*
Over Engineered Calculator

This is a sample API for an over engineered calculator for a coding test

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetHistoryHistoryEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetHistoryHistoryEntry{}

// GetHistoryHistoryEntry struct for GetHistoryHistoryEntry
type GetHistoryHistoryEntry struct {
	Expression *string `json:"expression,omitempty"`
	Result *string `json:"result,omitempty"`
}

// NewGetHistoryHistoryEntry instantiates a new GetHistoryHistoryEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetHistoryHistoryEntry() *GetHistoryHistoryEntry {
	this := GetHistoryHistoryEntry{}
	return &this
}

// NewGetHistoryHistoryEntryWithDefaults instantiates a new GetHistoryHistoryEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetHistoryHistoryEntryWithDefaults() *GetHistoryHistoryEntry {
	this := GetHistoryHistoryEntry{}
	return &this
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *GetHistoryHistoryEntry) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetHistoryHistoryEntry) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *GetHistoryHistoryEntry) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *GetHistoryHistoryEntry) SetExpression(v string) {
	o.Expression = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *GetHistoryHistoryEntry) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetHistoryHistoryEntry) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *GetHistoryHistoryEntry) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *GetHistoryHistoryEntry) SetResult(v string) {
	o.Result = &v
}

func (o GetHistoryHistoryEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetHistoryHistoryEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableGetHistoryHistoryEntry struct {
	value *GetHistoryHistoryEntry
	isSet bool
}

func (v NullableGetHistoryHistoryEntry) Get() *GetHistoryHistoryEntry {
	return v.value
}

func (v *NullableGetHistoryHistoryEntry) Set(val *GetHistoryHistoryEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableGetHistoryHistoryEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableGetHistoryHistoryEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetHistoryHistoryEntry(val *GetHistoryHistoryEntry) *NullableGetHistoryHistoryEntry {
	return &NullableGetHistoryHistoryEntry{value: val, isSet: true}
}

func (v NullableGetHistoryHistoryEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetHistoryHistoryEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


